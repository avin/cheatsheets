// ---------------------------------------------------
// üìå –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞ —Ç–∏–ø–æ–≤
// ---------------------------------------------------
type Equal<A, B> = (<T>() => T extends A ? 1 : 2) extends <T>() => T extends B
  ? 1
  : 2
  ? true
  : false;

type Expect<T extends true> = T;

type TestEqual = Expect<Equal<'a', 'a'>>;
// type TestFail = Expect<Equal<'a', 'b'>>; // –æ—à–∏–±–∫–∞


// ---------------------------------------------------
// üìå –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–π
// ---------------------------------------------------
type UnionToIntersection<U> = (
  U extends unknown ? (arg: U) => void : never
) extends (arg: infer R) => void
  ? R
  : never;

type Intersection = UnionToIntersection<
  { id: string } | { createdAt: Date }
>; // { id: string } & { createdAt: Date }


// ---------------------------------------------------
// üìå –ü–æ–≤–æ—Ä–æ—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –≤ –∫–æ—Ä—Ç–µ–∂
// ---------------------------------------------------
type UnionToTuple<T, R extends unknown[] = []> = [T] extends [never]
  ? R
  : UnionToIntersection<
      T extends unknown ? (x: T) => void : never
    > extends (x: infer L) => void
      ? UnionToTuple<Exclude<T, L>, [L, ...R]>
      : never;

type TupleFromUnion = UnionToTuple<'a' | 'b' | 'c'>; // ["c", "b", "a"]


// ---------------------------------------------------
// üìå –ì–ª—É–±–æ–∫–∏–µ partial / required
// ---------------------------------------------------
type DeepPartial<T> = T extends object
  ? { [K in keyof T]?: DeepPartial<T[K]> }
  : T;

type DeepRequired<T> = T extends object
  ? { [K in keyof T]-?: DeepRequired<T[K]> }
  : T;

type Settings = {
  theme?: { mode: 'dark' | 'light'; contrast?: number };
  layout?: { sidebar?: { collapsed?: boolean } };
};

type SettingsDraft = DeepPartial<Settings>;
type SettingsStrict = DeepRequired<Settings>;


// ---------------------------------------------------
// üìå –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π –ø–æ —Ç–∏–ø—É –∑–Ω–∞—á–µ–Ω–∏—è
// ---------------------------------------------------
type KeysByValue<T, TValue> = {
  [K in keyof T]-?: T[K] extends TValue ? K : never;
}[keyof T];

type OnlyStrings<T> = Pick<T, KeysByValue<T, string>>;

type Env = {
  API_URL: string;
  PORT: number;
  DEBUG: boolean;
  TOKEN: string;
};

type EnvStrings = OnlyStrings<Env>;


// ---------------------------------------------------
// üìå –¢–∏–ø–æ–≤—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –Ω–∞–¥ –º–∞—Å—Å–∏–≤–∞–º–∏
// ---------------------------------------------------
type Zip<TA extends unknown[], TB extends unknown[]> = TA extends [
  infer A,
  ...infer ARest
]
  ? TB extends [infer B, ...infer BRest]
    ? [[A, B], ...Zip<ARest, BRest>]
    : []
  : [];

type Reverse<T extends unknown[]> = T extends [infer Head, ...infer Tail]
  ? [...Reverse<Tail>, Head]
  : [];

type Numbers = [1, 2, 3];
type Letters = ['a', 'b', 'c'];

type Zipped = Zip<Numbers, Letters>; // [[1, "a"], [2, "b"], [3, "c"]]
type Reversed = Reverse<Numbers>; // [3, 2, 1]


// ---------------------------------------------------
// üìå –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä
// ---------------------------------------------------
type Exact<T, Shape> = T extends Shape
  ? Shape extends T
    ? T
    : never
  : never;

type Shape = { id: string; email?: string };

type ValidShape = Exact<{ id: string }, Shape>; // { id: string }
type ValidFullShape = Exact<{ id: string; email?: string }, Shape>; // { id: string; email?: string }
type InvalidShape = Exact<{ id: string; email?: string; extra: boolean }, Shape>; // never


// ---------------------------------------------------
// üìå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–≤–æ–¥–æ–º —Ç–∏–ø–æ–≤ —á–µ—Ä–µ–∑ NoInfer
// ---------------------------------------------------
type NoInfer<T> = [T][T extends any ? 0 : never];

type SupportedLocale = 'en' | 'ru';

declare function translate<T extends SupportedLocale>(
  key: string,
  locale: T,
  fallback?: NoInfer<T>,
): string;

// translate('title', 'en', 'fr'); // –æ—à–∏–±–∫–∞: 'fr' –Ω–µ –≤—ã–≤–æ–¥–∏—Ç—Å—è –∫–∞–∫ Locale


// ---------------------------------------------------
// üìå –†–∞–±–æ—Ç–∞ —Å –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏
// ---------------------------------------------------
type DomainEvent =
  | { type: 'user:created'; payload: { id: string; email: string } }
  | { type: 'user:deleted'; payload: { id: string; reason?: string } }
  | { type: 'billing:charged'; payload: { invoiceId: string; amount: number } };

type EventOf<TUnion, TType> = TUnion extends { type: TType } ? TUnion : never;
type PayloadOf<TUnion, TType> = EventOf<TUnion, TType> extends {
  payload: infer P;
}
  ? P
  : never;

type DeletedPayload = PayloadOf<DomainEvent, 'user:deleted'>;


// ---------------------------------------------------
// üìå –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ union ‚Üí record
// ---------------------------------------------------
type UnionToRecord<U extends { type: PropertyKey; payload: unknown }> = {
  [E in U as E['type']]: E['payload'];
};

type EventPayloadMap = UnionToRecord<DomainEvent>;

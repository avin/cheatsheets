// ---------------------------------------------------
// üìå type vs interface, –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
// ---------------------------------------------------
type UserId = string | number;

interface UserProfile {
  id: UserId;
  name: string;
}

type WithTimestamps = { createdAt: Date; updatedAt: Date };

type DetailedUser = UserProfile & WithTimestamps;

// interface –¥–æ–ø—É—Å–∫–∞–µ—Ç –¥–µ–∫–ª–∞—Ä–∞—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
interface UserProfile {
  email?: string;
}


// ---------------------------------------------------
// üìå –õ–∏—Ç–µ—Ä–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –∏ —Å—Ç—Ä–æ–≥–æ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
// ---------------------------------------------------
type Theme = 'light' | 'dark' | 'system';

const defaultTheme = 'light' as const; // —Ç–∏–ø 'light'

const settings = {
  theme: defaultTheme,
  pageSize: 20,
} as const; // –≤—Å–µ –ø–æ–ª—è —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è readonly –∏ literal

type Settings = typeof settings; // { readonly theme: 'light'; readonly pageSize: 20 }


// ---------------------------------------------------
// üìå Readonly, optional –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
// ---------------------------------------------------
interface ApiConfig {
  readonly baseUrl: string;
  timeoutMs?: number;
}

const apiConfig: ApiConfig = { baseUrl: 'https://api.example.com' };

// apiConfig.baseUrl = '' // –æ—à–∏–±–∫–∞: readonly


// ---------------------------------------------------
// üìå –ö–æ—Ä—Ç–µ–∂–∏ —Å –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
// ---------------------------------------------------
type Point = [x: number, y: number, z?: number];

type HttpEntry = readonly [
  method: 'GET' | 'POST',
  url: string,
  status: number,
];


// ---------------------------------------------------
// üìå –¢–∏–ø—ã never –∏ unknown
// ---------------------------------------------------
type JsonValue =
  | string
  | number
  | boolean
  | null
  | { [key: string]: JsonValue }
  | JsonValue[];

type AnyFunction = (...args: unknown[]) => unknown;

type EnsureNever<T> = [T] extends [never] ? true : false;

type EnsureJson<T> = T extends JsonValue ? T : never;

type LocaleExhaustiveCheck = EnsureNever<Exclude<'en' | 'ru', Locale>>; // true


// ---------------------------------------------------
// üìå –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –Ω–æ–º–∏–Ω–∞–ª—å–Ω–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
// ---------------------------------------------------
declare const userIdBrand: unique symbol;

type BrandedId<T extends string> = string & { readonly [userIdBrand]: T };

type InvoiceId = BrandedId<'Invoice'>;
type CustomerId = BrandedId<'Customer'>;


// ---------------------------------------------------
// üìå satisfies –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä
// ---------------------------------------------------
const locales = {
  en: { title: 'Dashboard', shortcut: '‚åòD' },
  ru: { title: '–ü–∞–Ω–µ–ª—å', shortcut: 'Ctrl+D' },
} satisfies Record<string, { title: string; shortcut: string }>;

type Locale = keyof typeof locales; // "en" | "ru"


// ---------------------------------------------------
// üìå –ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞—Ç—É—Ä –∏ —Ç–∏–ø—ã —Ñ—É–Ω–∫—Ü–∏–π
// ---------------------------------------------------
type AsyncFn<TArgs extends unknown[], TResult> = (
  ...args: TArgs
) => Promise<TResult>;

type FetchUser = AsyncFn<[id: UserId], DetailedUser>;

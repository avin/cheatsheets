// ---------------------------------------------------
// üìå –û—á–µ—Ä–µ–¥—å (FIFO)
// ---------------------------------------------------
const queue = [];
queue.push(x);       // –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
queue.shift();       // —É–¥–∞–ª–µ–Ω–∏–µ


// ---------------------------------------------------
// üìå –°—Ç–µ–∫ (LIFO)
// ---------------------------------------------------
const stack = [];
stack.push(x);       // –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
stack.pop();         // —É–¥–∞–ª–µ–Ω–∏–µ


// ---------------------------------------------------
// üìå –î–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω—è—è –æ—á–µ—Ä–µ–¥—å (Deque)
// ---------------------------------------------------
const deque = [];
deque.push(x);       // –≤ –∫–æ–Ω–µ—Ü
deque.unshift(y);    // –≤ –Ω–∞—á–∞–ª–æ
deque.pop();         // —Å –∫–æ–Ω—Ü–∞
deque.shift();       // —Å –Ω–∞—á–∞–ª–∞


// ---------------------------------------------------
// üìå –°–≤—è–∑–Ω—ã–π —Å–ø–∏—Å–æ–∫ (—Ä—É—á–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
// ---------------------------------------------------
class Node {
  constructor(val) {
    this.val = val;
    this.next = null;
  }
}

const head = new Node(1);
head.next = new Node(2);


// ---------------------------------------------------
// üìå –ú–Ω–æ–∂–µ—Å—Ç–≤–æ (Set)
// ---------------------------------------------------
const set = new Set([1, 2]);
set.add(3);
set.delete(2);
set.has(1);


// ---------------------------------------------------
// üìå –•—ç—à-—Ç–∞–±–ª–∏—Ü–∞ / —Å–ª–æ–≤–∞—Ä—å (Map)
// ---------------------------------------------------
const map = new Map();
map.set('key', 123);
map.get('key');
map.has('key');
map.delete('key');


// ---------------------------------------------------
// üìå –ö—É—á–∞ (MinHeap)
// ---------------------------------------------------
class MinHeap {
  constructor() {
    this.heap = [];
  }

  insert(val) { /* push –∏ bubbleUp */
  }

  extractMin() { /* pop –∏ sinkDown */
  }
}


// ---------------------------------------------------
// üìå –ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ (–Ω–∞ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –º–∞—Å—Å–∏–≤–µ)
// ---------------------------------------------------
function binarySearch(arr, target) {
  let l = 0, r = arr.length - 1;
  while (l <= r) {
    const mid = Math.floor((l + r) / 2);
    if (arr[mid] === target) return mid;
    arr[mid] < target ? l = mid + 1 : r = mid - 1;
  }
  return -1;
}


// ---------------------------------------------------
// üìå –û–±—Ö–æ–¥ –≥—Ä–∞—Ñ–∞ ‚Äî DFS (—Å—Ç–µ–∫) / BFS (–æ—á–µ—Ä–µ–¥—å)
// ---------------------------------------------------
function dfs(root) {
  const stack = [root], visited = new Set();
  while (stack.length) {
    const node = stack.pop();
    if (visited.has(node)) continue;
    visited.add(node);
    stack.push(...node.neighbors);
  }
}

function bfs(root) {
  const queue = [root], visited = new Set();
  while (queue.length) {
    const node = queue.shift();
    if (visited.has(node)) continue;
    visited.add(node);
    queue.push(...node.neighbors);
  }
}


// ---------------------------------------------------
// üìå –¢–æ–ø–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ (DFS)
// ---------------------------------------------------
function topoSort(adj) {
  const visited = new Set();
  const result = [];

  function dfs(v) {
    if (visited.has(v)) return;
    visited.add(v);
    for (const u of (adj[v] || [])) {
      dfs(u);
    }
    result.unshift(v);
  }

  for (const v in adj) {
    dfs(v);
  }
  return result;
}


// ---------------------------------------------------
// üìå –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ü–∏–∫–ª –≤ –≥—Ä–∞—Ñ–µ (DFS)
// ---------------------------------------------------
function hasCycle(adj) {
  const color = {}; // 0=white, 1=gray, 2=black

  function dfs(v) {
    color[v] = 1;
    for (const u of (adj[v] || [])) {
      if (color[u] === 1) return true; // back edge
      if (color[u] === 0 && dfs(u)) return true;
    }
    color[v] = 2;
    return false;
  }

  for (const v in adj) {
    color[v] = color[v] || 0;
  }

  for (const v in adj) {
    if (color[v] === 0 && dfs(v)) return true;
  }
  return false;
}


// ---------------------------------------------------
// üìå Union-Find (—Å–∏—Å—Ç–µ–º–∞ –Ω–µ–ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏—Ö—Å—è –º–Ω–æ–∂–µ—Å—Ç–≤)
// ---------------------------------------------------
class UnionFind {
  constructor(size) {
    this.parent = Array.from({length: size}, (_, i) => i);
    this.rank = Array(size).fill(0);
  }

  find(x) {
    if (this.parent[x] !== x) {
      this.parent[x] = this.find(this.parent[x]); // path compression
    }
    return this.parent[x];
  }

  union(x, y) {
    const rootX = this.find(x);
    const rootY = this.find(y);
    if (rootX === rootY) return false;

    if (this.rank[rootX] < this.rank[rootY]) {
      this.parent[rootX] = rootY;
    } else if (this.rank[rootX] > this.rank[rootY]) {
      this.parent[rootY] = rootX;
    } else {
      this.parent[rootY] = rootX;
      this.rank[rootX]++;
    }
    return true;
  }
}
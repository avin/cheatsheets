// ---------------------------------------------------
// üìå –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞
// ---------------------------------------------------
const arr = [];


// ---------------------------------------------------
// üìå –ò—Ç–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –º–∞—Å—Å–∏–≤—É
// ---------------------------------------------------
for (let i = 0; i < arr.length; i++) console.log(arr[i]);
arr.forEach(i => console.log(i));
for (const i of arr) console.log(i);


// ---------------------------------------------------
// üìå –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
// ---------------------------------------------------
const filtered = arr.filter(x => x > 0);


// ---------------------------------------------------
// üìå –ü–æ–∏—Å–∫ –∏ —É—Å–ª–æ–≤–∏—è
// ---------------------------------------------------
const found = arr.find(x => x === 1);
const index = arr.findIndex(x => x === 1);
const hasValue = arr.includes(1);
const any = arr.some(x => x > 10);     // –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω
const all = arr.every(x => x > 0);     // –≤—Å–µ –ª–∏ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—Ç


// ---------------------------------------------------
// üìå Map-–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
// ---------------------------------------------------
const mapped = arr.map(x => x * 2);


// ---------------------------------------------------
// üìå Reduce / fold
// ---------------------------------------------------
const sum = arr.reduce((acc, x) => acc + x, 0);


// ---------------------------------------------------
// üìå –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ (–Ω–µ –º—É—Ç–∏—Ä—É—è –æ—Ä–∏–≥–∏–Ω–∞–ª)
// ---------------------------------------------------
const sorted = [...arr].sort((a, b) => a - b);


// ---------------------------------------------------
// üìå –ú–∏–Ω–∏–º—É–º / –º–∞–∫—Å–∏–º—É–º
// ---------------------------------------------------
const min = Math.min(...arr);
const max = Math.max(...arr);


// ---------------------------------------------------
// üìå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
// ---------------------------------------------------
const count = arr.length;


// ---------------------------------------------------
// üìå –°–ª–∞–π—Å—ã
// ---------------------------------------------------
const firstTwo = arr.slice(0, 2);
const rest = arr.slice(2);


// ---------------------------------------------------
// üìå –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–æ–≤
// ---------------------------------------------------
const combined = [...arr1, ...arr2];


// ---------------------------------------------------
// üìå –†–∞–∑–≤–æ—Ä–æ—Ç –º–∞—Å—Å–∏–≤–∞ (–±–µ–∑ –º—É—Ç–∞—Ü–∏–∏)
// ---------------------------------------------------
const reversed = [...arr].reverse();


// ---------------------------------------------------
// üìå –£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É (–∏–º–º—É—Ç–∞–±–µ–ª—å–Ω–æ)
// ---------------------------------------------------
const indexToRemove = 2;
const withoutOne = [...arr.slice(0, indexToRemove), ...arr.slice(indexToRemove + 1)];


// ---------------------------------------------------
// üìå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
// ---------------------------------------------------
arr.unshift(0);  // –≤ –Ω–∞—á–∞–ª–æ
arr.push(99);    // –≤ –∫–æ–Ω–µ—Ü


// ---------------------------------------------------
// üìå –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ—Ç—É
// ---------------------------------------------------
const isEmpty = arr.length === 0;


// ---------------------------------------------------
// üìå –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è
// ---------------------------------------------------
const unique = [...new Set(arr)];


// ---------------------------------------------------
// üìå –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –∑–Ω–∞—á–µ–Ω–∏–µ–º
// ---------------------------------------------------
const filled = new Array(5).fill(0); // [0, 0, 0, 0, 0]


// ---------------------------------------------------
// üìå –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ —Å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
// ---------------------------------------------------
const range = Array.from({length: 5}, (_, i) => i); // [0, 1, 2, 3, 4]
const range1to5 = Array.from({length: 5}, (_, i) => i + 1); // [1, 2, 3, 4, 5]


// ---------------------------------------------------
// üìå –ü–æ–¥—Å—á—ë—Ç –≤—Ö–æ–∂–¥–µ–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç–∞
// ---------------------------------------------------
const countOccurrences = (arr, value) => arr.filter(x => x === value).length;


// ---------------------------------------------------
// üìå Flatten (—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –º–∞—Å—Å–∏–≤–æ–≤)
// ---------------------------------------------------
const nested = [[1, 2], [3, [4, 5]]];
const flat = nested.flat();        // [1, 2, 3, [4, 5]]
const deepFlat = nested.flat(Infinity); // [1, 2, 3, 4, 5]


// ---------------------------------------------------
// üìå –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ —É—Å–ª–æ–≤–∏—é
// ---------------------------------------------------
const grouped = arr.reduce((acc, x) => {
  const key = x % 2 === 0 ? 'even' : 'odd';
  (acc[key] = acc[key] || []).push(x);
  return acc;
}, {});


// ---------------------------------------------------
// üìå Zip –¥–≤—É—Ö –º–∞—Å—Å–∏–≤–æ–≤
// ---------------------------------------------------
const zip = (arr1, arr2) => arr1.map((val, i) => [val, arr2[i]]);
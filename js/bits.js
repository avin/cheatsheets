// ---------------------------------------------------
// üìå –û—Å–Ω–æ–≤–Ω—ã–µ –±–∏—Ç–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
// ---------------------------------------------------
const a = 5;  // 0101
const b = 3;  // 0011

const andResult = a & b;   // 0001 = 1
const orResult = a | b;    // 0111 = 7
const xorResult = a ^ b;   // 0110 = 6
const notResult = ~a;      // –∏–Ω–≤–µ—Ä—Å–∏—è –≤—Å–µ—Ö –±–∏—Ç
const leftShift = a << 1;  // 1010 = 10
const rightShift = a >> 1; // 0010 = 2
const zeroFillRightShift = a >>> 1; // –±–µ–∑–∑–Ω–∞–∫–æ–≤—ã–π —Å–¥–≤–∏–≥ –≤–ø—Ä–∞–≤–æ


// ---------------------------------------------------
// üìå –ü—Ä–æ–≤–µ—Ä–∫–∞, —É—Å—Ç–∞–Ω–æ–≤–∫–∞, —Å–Ω—è—Ç–∏–µ –±–∏—Ç–∞
// ---------------------------------------------------
function getBit(num, pos) {
  return (num & (1 << pos)) !== 0;
}

function setBit(num, pos) {
  return num | (1 << pos);
}

function clearBit(num, pos) {
  return num & ~(1 << pos);
}

function toggleBit(num, pos) {
  return num ^ (1 << pos);
}


// ---------------------------------------------------
// üìå –ü–æ–¥—Å—á—ë—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –µ–¥–∏–Ω–∏—á–Ω—ã—Ö –±–∏—Ç (popcount)
// ---------------------------------------------------
function countBits(num) {
  let count = 0;
  while (num) {
    count += num & 1;
    num >>>= 1;
  }
  return count;
}

// –ë–æ–ª–µ–µ –±—ã—Å—Ç—Ä—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º (Brian Kernighan)
function countBitsFast(num) {
  let count = 0;
  while (num) {
    num &= num - 1; // —Å–Ω–∏–º–∞–µ–º –º–ª–∞–¥—à–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∏—Ç
    count++;
  }
  return count;
}


// ---------------------------------------------------
// üìå –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç–µ–ø–µ–Ω—å –¥–≤–æ–π–∫–∏
// ---------------------------------------------------
function isPowerOfTwo(num) {
  return num > 0 && (num & (num - 1)) === 0;
}


// ---------------------------------------------------
// üìå –ü–æ–ª—É—á–µ–Ω–∏–µ –º–ª–∞–¥—à–µ–≥–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –±–∏—Ç–∞
// ---------------------------------------------------
function lowestSetBit(num) {
  return num & -num;
}


// ---------------------------------------------------
// üìå –°–Ω—è—Ç–∏–µ –º–ª–∞–¥—à–µ–≥–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –±–∏—Ç–∞
// ---------------------------------------------------
function clearLowestBit(num) {
  return num & (num - 1);
}


// ---------------------------------------------------
// üìå –ë–∏—Ç–æ–≤—ã–µ –º–∞—Å–∫–∏ –∏ —Ñ–ª–∞–≥–∏
// ---------------------------------------------------
const FLAG_READ = 1 << 0;    // 0001
const FLAG_WRITE = 1 << 1;   // 0010
const FLAG_EXEC = 1 << 2;    // 0100
const FLAG_ADMIN = 1 << 3;   // 1000

let permissions = 0;

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–ª–∞–≥–æ–≤
permissions |= FLAG_READ;
permissions |= FLAG_WRITE;

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–ª–∞–≥–∞
const canRead = (permissions & FLAG_READ) !== 0;

// –°–Ω—è—Ç–∏–µ —Ñ–ª–∞–≥–∞
permissions &= ~FLAG_WRITE;

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ñ–ª–∞–≥–∞
permissions ^= FLAG_EXEC;


// ---------------------------------------------------
// üìå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤ (–±–∏—Ç–æ–≤—ã–µ –º–∞—Å–∫–∏)
// ---------------------------------------------------
function generateSubsets(n) {
  const totalSubsets = 1 << n;
  const result = [];

  for (let mask = 0; mask < totalSubsets; mask++) {
    const subset = [];
    for (let i = 0; i < n; i++) {
      if (mask & (1 << i)) {
        subset.push(i);
      }
    }
    result.push(subset);
  }

  return result;
}


// ---------------------------------------------------
// üìå –ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ –≤—Å–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –±–∏—Ç–∞–º
// ---------------------------------------------------
function iterateSetBits(num) {
  const positions = [];
  let pos = 0;

  while (num) {
    if (num & 1) {
      positions.push(pos);
    }
    num >>>= 1;
    pos++;
  }

  return positions;
}


// ---------------------------------------------------
// üìå Swap –¥–≤—É—Ö —á–∏—Å–µ–ª –±–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π (XOR trick)
// ---------------------------------------------------
function swapXOR(a, b) {
  a ^= b;
  b ^= a;
  a ^= b;
  return [a, b];
}


// ---------------------------------------------------
// üìå –ü–æ–∏—Å–∫ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞ (–≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –¥–≤–∞–∂–¥—ã)
// ---------------------------------------------------
function findSingle(nums) {
  let result = 0;
  for (const num of nums) {
    result ^= num;
  }
  return result;
}


// ---------------------------------------------------
// üìå –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞–∫–æ–≤–æ–≥–æ –±–∏—Ç–∞
// ---------------------------------------------------
function isNegative(num) {
  return (num >> 31) & 1;
}


// ---------------------------------------------------
// üìå –ê–±—Å–æ–ª—é—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–µ–∑ –≤–µ—Ç–≤–ª–µ–Ω–∏–π
// ---------------------------------------------------
function absNoBranch(num) {
  const mask = num >> 31;
  return (num + mask) ^ mask;
}


// ---------------------------------------------------
// üìå –ú–∏–Ω–∏–º—É–º/–º–∞–∫—Å–∏–º—É–º –±–µ–∑ –≤–µ—Ç–≤–ª–µ–Ω–∏–π
// ---------------------------------------------------
function minNoBranch(a, b) {
  return b ^ ((a ^ b) & -(a < b));
}

function maxNoBranch(a, b) {
  return a ^ ((a ^ b) & -(a < b));
}


// ---------------------------------------------------
// üìå –†–∞–∑–≤–æ—Ä–æ—Ç –±–∏—Ç –≤ —á–∏—Å–ª–µ (32-bit)
// ---------------------------------------------------
function reverseBits(num) {
  let result = 0;
  for (let i = 0; i < 32; i++) {
    result = (result << 1) | (num & 1);
    num >>>= 1;
  }
  return result >>> 0; // –±–µ–∑–∑–Ω–∞–∫–æ–≤–æ–µ 32-–±–∏—Ç–Ω–æ–µ —á–∏—Å–ª–æ
}


// ---------------------------------------------------
// üìå –ü–æ–¥—Å—á—ë—Ç –º–ª–∞–¥—à–∏—Ö –Ω—É–ª–µ–π (trailing zeros)
// ---------------------------------------------------
function countTrailingZeros(num) {
  if (num === 0) return 32;
  let count = 0;
  while ((num & 1) === 0) {
    num >>>= 1;
    count++;
  }
  return count;
}

// –ë–æ–ª–µ–µ –±—ã—Å—Ç—Ä—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
function countTrailingZerosFast(num) {
  return Math.clz32((num & -num) - 1) - Math.clz32(num);
}


// ---------------------------------------------------
// üìå –ü–æ–¥—Å—á—ë—Ç —Å—Ç–∞—Ä—à–∏—Ö –Ω—É–ª–µ–π (leading zeros)
// ---------------------------------------------------
function countLeadingZeros(num) {
  return Math.clz32(num);
}


// ---------------------------------------------------
// üìå –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç–µ–ø–µ–Ω–∏ –¥–≤–æ–π–∫–∏
// ---------------------------------------------------
function nextPowerOfTwo(num) {
  if (num === 0) return 1;
  num--;
  num |= num >>> 1;
  num |= num >>> 2;
  num |= num >>> 4;
  num |= num >>> 8;
  num |= num >>> 16;
  return num + 1;
}


// ---------------------------------------------------
// üìå –î–ª–∏–Ω–∞ —á–∏—Å–ª–∞ –≤ –±–∏—Ç–∞—Ö (floor(log2(n)) + 1)
// ---------------------------------------------------
function bitLength(num) {
  if (num === 0) return 0;
  return 32 - Math.clz32(num);
}


// ---------------------------------------------------
// üìå –ú–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏–µ –º–ª–∞–¥—à–∏—Ö N –±–∏—Ç
// ---------------------------------------------------
function maskLowerNBits(n) {
  return (1 << n) - 1;
}


// ---------------------------------------------------
// üìå –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –±–∏—Ç
// ---------------------------------------------------
function extractBits(num, start, length) {
  const mask = (1 << length) - 1;
  return (num >>> start) & mask;
}


// ---------------------------------------------------
// üìå –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—ë—Ç–Ω–æ—Å—Ç–∏ (—á—ë—Ç–Ω–æ–µ —á–∏—Å–ª–æ –µ–¥–∏–Ω–∏—Ü)
// ---------------------------------------------------
function hasEvenParity(num) {
  let parity = 0;
  while (num) {
    parity ^= 1;
    num &= num - 1;
  }
  return parity === 0;
}


// ---------------------------------------------------
// üìå –†–∞–±–æ—Ç–∞ —Å BigInt (–¥–ª—è –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª)
// ---------------------------------------------------
const bigA = 5n;
const bigB = 3n;

const bigAnd = bigA & bigB;
const bigOr = bigA | bigB;
const bigXor = bigA ^ bigB;
const bigNot = ~bigA;
const bigLeftShift = bigA << 1n;
const bigRightShift = bigA >> 1n;


// ---------------------------------------------------
// üìå –ë—ã—Å—Ç—Ä–æ–µ —É–º–Ω–æ–∂–µ–Ω–∏–µ/–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç–µ–ø–µ–Ω—å –¥–≤–æ–π–∫–∏
// ---------------------------------------------------
function multiplyByPowerOf2(num, power) {
  return num << power;
}

function divideByPowerOf2(num, power) {
  return num >> power;
}


// ---------------------------------------------------
// üìå –ü—Ä–æ–≤–µ—Ä–∫–∞, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ N-–π –±–∏—Ç
// ---------------------------------------------------
function isBitSet(num, n) {
  return (num & (1 << n)) !== 0;
}


// ---------------------------------------------------
// üìå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –±–∏—Ç
// ---------------------------------------------------
function setBitRange(num, start, end) {
  const mask = ((1 << (end - start + 1)) - 1) << start;
  return num | mask;
}


// ---------------------------------------------------
// üìå –°–±—Ä–æ—Å –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –±–∏—Ç
// ---------------------------------------------------
function clearBitRange(num, start, end) {
  const mask = ((1 << (end - start + 1)) - 1) << start;
  return num & ~mask;
}

package cheatsheets

import (
	"fmt"
	"math/bits"
)

// ---------------------------------------------------
// üìå –û—Å–Ω–æ–≤–Ω—ã–µ –±–∏—Ç–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
// ---------------------------------------------------
func bitBasicOps() {
	a, b := 5, 3 // 0101, 0011

	andResult := a & b   // 0001 = 1
	orResult := a | b    // 0111 = 7
	xorResult := a ^ b   // 0110 = 6
	notResult := ^a      // –∏–Ω–≤–µ—Ä—Å–∏—è –≤—Å–µ—Ö –±–∏—Ç
	leftShift := a << 1  // 1010 = 10
	rightShift := a >> 1 // 0010 = 2

	fmt.Println(andResult, orResult, xorResult, notResult, leftShift, rightShift)
}

// ---------------------------------------------------
// üìå –ü—Ä–æ–≤–µ—Ä–∫–∞, —É—Å—Ç–∞–Ω–æ–≤–∫–∞, —Å–Ω—è—Ç–∏–µ –±–∏—Ç–∞
// ---------------------------------------------------
func getBit(num, pos int) bool {
	return (num & (1 << pos)) != 0
}

func setBit(num, pos int) int {
	return num | (1 << pos)
}

func clearBit(num, pos int) int {
	return num &^ (1 << pos)
}

func toggleBit(num, pos int) int {
	return num ^ (1 << pos)
}

// ---------------------------------------------------
// üìå –ü–æ–¥—Å—á—ë—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –µ–¥–∏–Ω–∏—á–Ω—ã—Ö –±–∏—Ç (popcount)
// ---------------------------------------------------
func countBits(num int) int {
	count := 0
	for num > 0 {
		count += num & 1
		num >>= 1
	}
	return count
}

func countBitsBuiltin(num uint) int {
	return bits.OnesCount(num)
}

func countBitsBuiltin64(num uint64) int {
	return bits.OnesCount64(num)
}

// ---------------------------------------------------
// üìå –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç–µ–ø–µ–Ω—å –¥–≤–æ–π–∫–∏
// ---------------------------------------------------
func isPowerOfTwo(num int) bool {
	return num > 0 && (num&(num-1)) == 0
}

// ---------------------------------------------------
// üìå –ü–æ–ª—É—á–µ–Ω–∏–µ –º–ª–∞–¥—à–µ–≥–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –±–∏—Ç–∞
// ---------------------------------------------------
func lowestSetBit(num int) int {
	return num & -num
}

// ---------------------------------------------------
// üìå –°–Ω—è—Ç–∏–µ –º–ª–∞–¥—à–µ–≥–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –±–∏—Ç–∞
// ---------------------------------------------------
func clearLowestBit(num int) int {
	return num & (num - 1)
}

// ---------------------------------------------------
// üìå –ë–∏—Ç–æ–≤—ã–µ –º–∞—Å–∫–∏ –∏ —Ñ–ª–∞–≥–∏
// ---------------------------------------------------
func bitFlags() {
	const (
		FlagRead  = 1 << 0 // 0001
		FlagWrite = 1 << 1 // 0010
		FlagExec  = 1 << 2 // 0100
		FlagAdmin = 1 << 3 // 1000
	)

	var permissions int

	// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–ª–∞–≥–æ–≤
	permissions |= FlagRead
	permissions |= FlagWrite

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–ª–∞–≥–∞
	canRead := (permissions & FlagRead) != 0

	// –°–Ω—è—Ç–∏–µ —Ñ–ª–∞–≥–∞
	permissions &^= FlagWrite

	// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ñ–ª–∞–≥–∞
	permissions ^= FlagExec

	fmt.Println(canRead, permissions)
}

// ---------------------------------------------------
// üìå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤ (–±–∏—Ç–æ–≤—ã–µ –º–∞—Å–∫–∏)
// ---------------------------------------------------
func generateSubsets(n int) {
	totalSubsets := 1 << n
	for mask := 0; mask < totalSubsets; mask++ {
		fmt.Print("–ü–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ: ")
		for i := 0; i < n; i++ {
			if mask&(1<<i) != 0 {
				fmt.Print(i, " ")
			}
		}
		fmt.Println()
	}
}

// ---------------------------------------------------
// üìå –ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ –≤—Å–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –±–∏—Ç–∞–º
// ---------------------------------------------------
func iterateSetBits(num int) {
	for num > 0 {
		lowestBit := num & -num
		bitPosition := bits.TrailingZeros(uint(lowestBit))
		fmt.Println("–ë–∏—Ç –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏:", bitPosition)
		num &= num - 1 // —Å–Ω–∏–º–∞–µ–º –º–ª–∞–¥—à–∏–π –±–∏—Ç
	}
}

// ---------------------------------------------------
// üìå Swap –¥–≤—É—Ö —á–∏—Å–µ–ª –±–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π (XOR trick)
// ---------------------------------------------------
func swapXOR(a, b int) (int, int) {
	a ^= b
	b ^= a
	a ^= b
	return a, b
}

// ---------------------------------------------------
// üìå –ü–æ–∏—Å–∫ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞ (–≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –¥–≤–∞–∂–¥—ã)
// ---------------------------------------------------
func findSingle(nums []int) int {
	result := 0
	for _, num := range nums {
		result ^= num
	}
	return result
}

// ---------------------------------------------------
// üìå –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞–∫–æ–≤–æ–≥–æ –±–∏—Ç–∞
// ---------------------------------------------------
func isNegative(num int) bool {
	return num < 0
}

// ---------------------------------------------------
// üìå –†–∞–∑–≤–æ—Ä–æ—Ç –±–∏—Ç –≤ —á–∏—Å–ª–µ (32-bit)
// ---------------------------------------------------
func reverseBits(num uint32) uint32 {
	return bits.Reverse32(num)
}

func reverseBits64(num uint64) uint64 {
	return bits.Reverse64(num)
}

// ---------------------------------------------------
// üìå –ü–æ–¥—Å—á—ë—Ç —Å—Ç–∞—Ä—à–∏—Ö –Ω—É–ª–µ–π (leading zeros)
// ---------------------------------------------------
func countLeadingZeros(num uint) int {
	return bits.LeadingZeros(num)
}

func countLeadingZeros64(num uint64) int {
	return bits.LeadingZeros64(num)
}

// ---------------------------------------------------
// üìå –ü–æ–¥—Å—á—ë—Ç –º–ª–∞–¥—à–∏—Ö –Ω—É–ª–µ–π (trailing zeros)
// ---------------------------------------------------
func countTrailingZeros(num uint) int {
	return bits.TrailingZeros(num)
}

func countTrailingZeros64(num uint64) int {
	return bits.TrailingZeros64(num)
}

// ---------------------------------------------------
// üìå –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç–µ–ø–µ–Ω–∏ –¥–≤–æ–π–∫–∏
// ---------------------------------------------------
func nextPowerOfTwo(num uint32) uint32 {
	if num == 0 {
		return 1
	}
	num--
	num |= num >> 1
	num |= num >> 2
	num |= num >> 4
	num |= num >> 8
	num |= num >> 16
	return num + 1
}

// ---------------------------------------------------
// üìå –î–ª–∏–Ω–∞ —á–∏—Å–ª–∞ –≤ –±–∏—Ç–∞—Ö (floor(log2(n)) + 1)
// ---------------------------------------------------
func bitLength(num uint) int {
	return bits.Len(num)
}

func bitLength64(num uint64) int {
	return bits.Len64(num)
}

// ---------------------------------------------------
// üìå Rotate left/right
// ---------------------------------------------------
func rotateLeft(num uint, shift int) uint {
	return bits.RotateLeft(num, shift)
}

func rotateLeft64(num uint64, shift int) uint64 {
	return bits.RotateLeft64(num, shift)
}

// ---------------------------------------------------
// üìå –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –±–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
// ---------------------------------------------------
func hasOnlyOneBitSet(num int) bool {
	return num > 0 && (num&(num-1)) == 0
}

// ---------------------------------------------------
// üìå –ú–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏–µ –º–ª–∞–¥—à–∏—Ö N –±–∏—Ç
// ---------------------------------------------------
func maskLowerNBits(n int) int {
	return (1 << n) - 1
}

// ---------------------------------------------------
// üìå –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –±–∏—Ç
// ---------------------------------------------------
func extractBits(num, start, length int) int {
	mask := (1 << length) - 1
	return (num >> start) & mask
}
